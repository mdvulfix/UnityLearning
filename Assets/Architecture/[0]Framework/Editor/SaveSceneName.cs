/*===============================================================
Product:    Cryoshock
Developer:  Dimitry Pixeye - pixeye@hbrew.store
Company:    Homebrew - http://hbrew.store
Date:       2/9/2018  7:20 PM
================================================================*/


using System;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using UnityEditor;
using UnityEditor.SceneManagement;
using UnityEngine;
using UnityEngine.SceneManagement;


namespace Homebrew
{
	public class SaveSceneName
	{
		[MenuItem("Tools/Actors/SaveScenes %Q",priority=190)]
		public static void SaveScenesName()
		{
			
			var scene = EditorSceneManager.GetActiveScene();
			
			var original = EditorBuildSettings.scenes;

			foreach (var settingsScene in original)
			{
				if (settingsScene.path == scene.path) return;
			}


			
			var filePath = Path.GetFullPath(@"Assets/[0]Framework/LibStarter/Scenes.cs");
			var assetPath = AssetDatabase.GenerateUniqueAssetPath("Assets/[0]Framework/LibStarter/Scenes.cs");
 
			if (assetPath == string.Empty)
			{
				Directory.CreateDirectory(Application.dataPath + "/[0]Framework");
		 
			}
			
			
			
			var encoding = new UTF8Encoding(true, false);
			var regex = new Regex(@"([^/]*/)*([\w\d\-]*)\.unity");
			var scenes = EditorBuildSettings.scenes;


			using (var tc = new StreamWriter(filePath, false, encoding))
			{
				tc.WriteLine(
					"/// This is autogenerated code. If you wish to edit this file press Scene Names -> Save scene names in options. ");
				tc.WriteLine("namespace Homebrew");
				tc.WriteLine("{");
				tc.WriteLine("[System.Flags]");
				tc.WriteLine("public enum Scenes");
				tc.WriteLine("{");
				for (var i = 0; i < scenes.Length; ++i)
				{
					var t = i != scenes.Length - 1 ? "," : "";
					tc.WriteLine(regex.Replace(scenes[i].path, "$2") + " = " + i + t);
				}

				tc.WriteLine("}");
				tc.Write(
					"public static class ExtScenes	{	public static void To(this Scenes s)	{	ProcessingSceneLoad.To((int) s);	}}");
				tc.WriteLine("}");
			}

	 
			 
			var newSettings = new EditorBuildSettingsScene[original.Length + 1];
			Array.Copy(original, newSettings, original.Length);
			var sceneToAdd = new EditorBuildSettingsScene(scene.path, true);
			newSettings[newSettings.Length - 1] = sceneToAdd;
			EditorBuildSettings.scenes = newSettings;

			AssetDatabase.SaveAssets();
			AssetDatabase.Refresh();
			
			
		}
	}
}